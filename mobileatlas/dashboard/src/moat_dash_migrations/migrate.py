from importlib import resources
import logging
from importlib.resources.abc import Traversable
import hashlib

from psycopg import Connection
from . import migrations

LOGGER = logging.getLogger(__name__)


def get_migrations() -> tuple[bytes, list[Traversable]]:
    ts = []
    hash = hashlib.sha256(usedforsecurity=False)
    for t in sorted(
        filter(lambda f: f.is_file(), resources.files(migrations).iterdir()),
        key=lambda t: t.name,
    ):
        if t.is_file():
            hash.update(t.read_text().encode())
            ts.append(t)

    return (hash.digest(), ts)


def run_migrations(conn: Connection):
    hash, migs = get_migrations()

    r = conn.execute(
        "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'migrations')"
    ).fetchone()

    if r is not None and r[0]:
        r = conn.execute("SELECT hash FROM migrations WHERE name IS NULL").fetchone()

        if r is not None:
            if hash == r[0]:
                LOGGER.info("Database schema already up to date.")
                return
            else:
                LOGGER.error(
                    "Database schema exists but does not match current migrations."
                )
                return

    for m in migs:
        with conn.cursor() as cur:
            cur.execute(m.read_text())

    conn.execute(
        "CREATE TABLE migrations (id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, name text UNIQUE NULLS NOT DISTINCT, hash bytea NOT NULL)"
    )
    conn.execute("INSERT INTO migrations (name, hash) VALUES (NULL, %s)", (hash,))
